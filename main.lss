
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002d2  00000366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006a  0080006a  00000370  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000038  00000000  00000000  00000ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000365  00000000  00000000  00000b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000192  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002a6  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000030  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000012a  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000178  00000000  00000000  00001412  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  0000158a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ed       	ldi	r30, 0xD2	; 210
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 36       	cpi	r26, 0x6E	; 110
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	74 d0       	rcall	.+232    	; 0x142 <main>
  5a:	39 c1       	rjmp	.+626    	; 0x2ce <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <numbers_output>:

#define __delay_cycles(n)     __builtin_avr_delay_cycles(n) 

unsigned long count = 0;
void numbers_output(unsigned long count)
{
  5e:	af 92       	push	r10
  60:	bf 92       	push	r11
  62:	cf 92       	push	r12
  64:	df 92       	push	r13
  66:	ef 92       	push	r14
  68:	ff 92       	push	r15
  6a:	0f 93       	push	r16
  6c:	1f 93       	push	r17
  6e:	df 93       	push	r29
  70:	cf 93       	push	r28
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	62 97       	sbiw	r28, 0x12	; 18
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	f8 94       	cli
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	0f be       	out	0x3f, r0	; 63
  80:	cd bf       	out	0x3d, r28	; 61

   unsigned short i=0;
   short digits[4]={0,0,0,0};
  82:	fe 01       	movw	r30, r28
  84:	31 96       	adiw	r30, 0x01	; 1
  86:	28 e0       	ldi	r18, 0x08	; 8
  88:	df 01       	movw	r26, r30
  8a:	1d 92       	st	X+, r1
  8c:	2a 95       	dec	r18
  8e:	e9 f7       	brne	.-6      	; 0x8a <numbers_output+0x2c>
   unsigned char number[] =
  90:	de 01       	movw	r26, r28
  92:	19 96       	adiw	r26, 0x09	; 9
  94:	e0 e6       	ldi	r30, 0x60	; 96
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	2a e0       	ldi	r18, 0x0A	; 10
  9a:	01 90       	ld	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	e1 f7       	brne	.-8      	; 0x9a <numbers_output+0x3c>
  a2:	8e 01       	movw	r16, r28
  a4:	0f 5f       	subi	r16, 0xFF	; 255
  a6:	1f 4f       	sbci	r17, 0xFF	; 255
     0x02, //6
     0x78, //7  
     0x00, //8
     0x10  //9   
   };
   while (count!=0)
  a8:	78 01       	movw	r14, r16
  {
   digits[i]=count%10;
  aa:	2a e0       	ldi	r18, 0x0A	; 10
  ac:	a2 2e       	mov	r10, r18
  ae:	b1 2c       	mov	r11, r1
  b0:	c1 2c       	mov	r12, r1
  b2:	d1 2c       	mov	r13, r1
     0x02, //6
     0x78, //7  
     0x00, //8
     0x10  //9   
   };
   while (count!=0)
  b4:	09 c0       	rjmp	.+18     	; 0xc8 <numbers_output+0x6a>
  {
   digits[i]=count%10;
  b6:	a6 01       	movw	r20, r12
  b8:	95 01       	movw	r18, r10
  ba:	e7 d0       	rcall	.+462    	; 0x28a <__udivmodsi4>
  bc:	f7 01       	movw	r30, r14
  be:	61 93       	st	Z+, r22
  c0:	71 93       	st	Z+, r23
  c2:	7f 01       	movw	r14, r30
   count=count/10;
  c4:	b9 01       	movw	r22, r18
  c6:	ca 01       	movw	r24, r20
     0x02, //6
     0x78, //7  
     0x00, //8
     0x10  //9   
   };
   while (count!=0)
  c8:	61 15       	cp	r22, r1
  ca:	71 05       	cpc	r23, r1
  cc:	81 05       	cpc	r24, r1
  ce:	91 05       	cpc	r25, r1
  d0:	91 f7       	brne	.-28     	; 0xb6 <numbers_output+0x58>
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
   count=count/10;
   i++;
  }
  for(i=0;i<4;i++)
  {
   PORTC |= (1<<i); // 'i'th PORTD GIVEN HIGH
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	50 e0       	ldi	r21, 0x00	; 0
   PORTD = number[digits[i]];
  da:	9e 01       	movw	r18, r28
  dc:	27 5f       	subi	r18, 0xF7	; 247
  de:	3f 4f       	sbci	r19, 0xFF	; 255
   count=count/10;
   i++;
  }
  for(i=0;i<4;i++)
  {
   PORTC |= (1<<i); // 'i'th PORTD GIVEN HIGH
  e0:	e5 b3       	in	r30, 0x15	; 21
  e2:	ba 01       	movw	r22, r20
  e4:	08 2e       	mov	r0, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <numbers_output+0x8e>
  e8:	66 0f       	add	r22, r22
  ea:	77 1f       	adc	r23, r23
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <numbers_output+0x8a>
  f0:	e6 2b       	or	r30, r22
  f2:	e5 bb       	out	0x15, r30	; 21
   PORTD = number[digits[i]];
  f4:	d8 01       	movw	r26, r16
  f6:	ed 91       	ld	r30, X+
  f8:	fd 91       	ld	r31, X+
  fa:	8d 01       	movw	r16, r26
  fc:	e2 0f       	add	r30, r18
  fe:	f3 1f       	adc	r31, r19
 100:	70 81       	ld	r23, Z
 102:	72 bb       	out	0x12, r23	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	e7 ee       	ldi	r30, 0xE7	; 231
 106:	f3 e0       	ldi	r31, 0x03	; 3
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <numbers_output+0xaa>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <numbers_output+0xb0>
 10e:	00 00       	nop
   _delay_us(500);
   PORTC &=~(1<<i); //'i'th PORTD GIVEN LOW
 110:	75 b3       	in	r23, 0x15	; 21
 112:	60 95       	com	r22
 114:	67 23       	and	r22, r23
 116:	65 bb       	out	0x15, r22	; 21
  {
   digits[i]=count%10;
   count=count/10;
   i++;
  }
  for(i=0;i<4;i++)
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	84 30       	cpi	r24, 0x04	; 4
 11c:	91 05       	cpc	r25, r1
 11e:	01 f7       	brne	.-64     	; 0xe0 <numbers_output+0x82>
   PORTC |= (1<<i); // 'i'th PORTD GIVEN HIGH
   PORTD = number[digits[i]];
   _delay_us(500);
   PORTC &=~(1<<i); //'i'th PORTD GIVEN LOW
  }
}
 120:	62 96       	adiw	r28, 0x12	; 18
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	cf 91       	pop	r28
 12e:	df 91       	pop	r29
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	ff 90       	pop	r15
 136:	ef 90       	pop	r14
 138:	df 90       	pop	r13
 13a:	cf 90       	pop	r12
 13c:	bf 90       	pop	r11
 13e:	af 90       	pop	r10
 140:	08 95       	ret

00000142 <main>:

int main( void )
{
  DDRD=0xff;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	81 bb       	out	0x11, r24	; 17
  PORTD=0xff;
 146:	82 bb       	out	0x12, r24	; 18
  DDRC = 0xff;
 148:	84 bb       	out	0x14, r24	; 20
  PORTC=0xff;
 14a:	85 bb       	out	0x15, r24	; 21
  DDRB = 0x00;
 14c:	17 ba       	out	0x17, r1	; 23
  PORTB=0xff;
 14e:	88 bb       	out	0x18, r24	; 24
  while(1)
  {

	 
	 if (bit_is_clear(PINB, PB0)) 
 150:	b0 99       	sbic	0x16, 0	; 22
 152:	1c c0       	rjmp	.+56     	; 0x18c <main+0x4a>
     {
	count++; 
 154:	80 91 6a 00 	lds	r24, 0x006A
 158:	90 91 6b 00 	lds	r25, 0x006B
 15c:	a0 91 6c 00 	lds	r26, 0x006C
 160:	b0 91 6d 00 	lds	r27, 0x006D
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	a1 1d       	adc	r26, r1
 168:	b1 1d       	adc	r27, r1
 16a:	80 93 6a 00 	sts	0x006A, r24
 16e:	90 93 6b 00 	sts	0x006B, r25
 172:	a0 93 6c 00 	sts	0x006C, r26
 176:	b0 93 6d 00 	sts	0x006D, r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	90 e7       	ldi	r25, 0x70	; 112
 17e:	a2 e0       	ldi	r26, 0x02	; 2
 180:	81 50       	subi	r24, 0x01	; 1
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	a0 40       	sbci	r26, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x3e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x48>
 18a:	00 00       	nop
	_delay_ms(100);
     }
     if (bit_is_clear(PINB, PB1)) 
 18c:	b1 99       	sbic	0x16, 1	; 22
 18e:	1c c0       	rjmp	.+56     	; 0x1c8 <main+0x86>
     {
	count+=10; 
 190:	80 91 6a 00 	lds	r24, 0x006A
 194:	90 91 6b 00 	lds	r25, 0x006B
 198:	a0 91 6c 00 	lds	r26, 0x006C
 19c:	b0 91 6d 00 	lds	r27, 0x006D
 1a0:	0a 96       	adiw	r24, 0x0a	; 10
 1a2:	a1 1d       	adc	r26, r1
 1a4:	b1 1d       	adc	r27, r1
 1a6:	80 93 6a 00 	sts	0x006A, r24
 1aa:	90 93 6b 00 	sts	0x006B, r25
 1ae:	a0 93 6c 00 	sts	0x006C, r26
 1b2:	b0 93 6d 00 	sts	0x006D, r27
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e7       	ldi	r25, 0x70	; 112
 1ba:	a2 e0       	ldi	r26, 0x02	; 2
 1bc:	81 50       	subi	r24, 0x01	; 1
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	a0 40       	sbci	r26, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x7a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x84>
 1c6:	00 00       	nop
	_delay_ms(100);
     }
     if (bit_is_clear(PINB, PB2)) 
 1c8:	b2 99       	sbic	0x16, 2	; 22
 1ca:	1d c0       	rjmp	.+58     	; 0x206 <main+0xc4>
     {
	count+=100; 
 1cc:	80 91 6a 00 	lds	r24, 0x006A
 1d0:	90 91 6b 00 	lds	r25, 0x006B
 1d4:	a0 91 6c 00 	lds	r26, 0x006C
 1d8:	b0 91 6d 00 	lds	r27, 0x006D
 1dc:	8c 59       	subi	r24, 0x9C	; 156
 1de:	9f 4f       	sbci	r25, 0xFF	; 255
 1e0:	af 4f       	sbci	r26, 0xFF	; 255
 1e2:	bf 4f       	sbci	r27, 0xFF	; 255
 1e4:	80 93 6a 00 	sts	0x006A, r24
 1e8:	90 93 6b 00 	sts	0x006B, r25
 1ec:	a0 93 6c 00 	sts	0x006C, r26
 1f0:	b0 93 6d 00 	sts	0x006D, r27
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	90 e7       	ldi	r25, 0x70	; 112
 1f8:	a2 e0       	ldi	r26, 0x02	; 2
 1fa:	81 50       	subi	r24, 0x01	; 1
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	a0 40       	sbci	r26, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0xb8>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0xc2>
 204:	00 00       	nop
	_delay_ms(100);
     }
     if (bit_is_clear(PINB, PB6)) 
 206:	b6 99       	sbic	0x16, 6	; 22
 208:	1d c0       	rjmp	.+58     	; 0x244 <main+0x102>
     {
	count+=1000; 
 20a:	80 91 6a 00 	lds	r24, 0x006A
 20e:	90 91 6b 00 	lds	r25, 0x006B
 212:	a0 91 6c 00 	lds	r26, 0x006C
 216:	b0 91 6d 00 	lds	r27, 0x006D
 21a:	88 51       	subi	r24, 0x18	; 24
 21c:	9c 4f       	sbci	r25, 0xFC	; 252
 21e:	af 4f       	sbci	r26, 0xFF	; 255
 220:	bf 4f       	sbci	r27, 0xFF	; 255
 222:	80 93 6a 00 	sts	0x006A, r24
 226:	90 93 6b 00 	sts	0x006B, r25
 22a:	a0 93 6c 00 	sts	0x006C, r26
 22e:	b0 93 6d 00 	sts	0x006D, r27
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	90 e7       	ldi	r25, 0x70	; 112
 236:	a2 e0       	ldi	r26, 0x02	; 2
 238:	81 50       	subi	r24, 0x01	; 1
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	a0 40       	sbci	r26, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0xf6>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x100>
 242:	00 00       	nop
	_delay_ms(100);
     }
	 
	 numbers_output(count);
 244:	60 91 6a 00 	lds	r22, 0x006A
 248:	70 91 6b 00 	lds	r23, 0x006B
 24c:	80 91 6c 00 	lds	r24, 0x006C
 250:	90 91 6d 00 	lds	r25, 0x006D
 254:	04 df       	rcall	.-504    	; 0x5e <numbers_output>
     if (count>=10000) {count=0;}
 256:	80 91 6a 00 	lds	r24, 0x006A
 25a:	90 91 6b 00 	lds	r25, 0x006B
 25e:	a0 91 6c 00 	lds	r26, 0x006C
 262:	b0 91 6d 00 	lds	r27, 0x006D
 266:	80 31       	cpi	r24, 0x10	; 16
 268:	27 e2       	ldi	r18, 0x27	; 39
 26a:	92 07       	cpc	r25, r18
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	a2 07       	cpc	r26, r18
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	b2 07       	cpc	r27, r18
 274:	08 f4       	brcc	.+2      	; 0x278 <main+0x136>
 276:	6c cf       	rjmp	.-296    	; 0x150 <main+0xe>
 278:	10 92 6a 00 	sts	0x006A, r1
 27c:	10 92 6b 00 	sts	0x006B, r1
 280:	10 92 6c 00 	sts	0x006C, r1
 284:	10 92 6d 00 	sts	0x006D, r1
 288:	63 cf       	rjmp	.-314    	; 0x150 <main+0xe>

0000028a <__udivmodsi4>:
 28a:	a1 e2       	ldi	r26, 0x21	; 33
 28c:	1a 2e       	mov	r1, r26
 28e:	aa 1b       	sub	r26, r26
 290:	bb 1b       	sub	r27, r27
 292:	fd 01       	movw	r30, r26
 294:	0d c0       	rjmp	.+26     	; 0x2b0 <__udivmodsi4_ep>

00000296 <__udivmodsi4_loop>:
 296:	aa 1f       	adc	r26, r26
 298:	bb 1f       	adc	r27, r27
 29a:	ee 1f       	adc	r30, r30
 29c:	ff 1f       	adc	r31, r31
 29e:	a2 17       	cp	r26, r18
 2a0:	b3 07       	cpc	r27, r19
 2a2:	e4 07       	cpc	r30, r20
 2a4:	f5 07       	cpc	r31, r21
 2a6:	20 f0       	brcs	.+8      	; 0x2b0 <__udivmodsi4_ep>
 2a8:	a2 1b       	sub	r26, r18
 2aa:	b3 0b       	sbc	r27, r19
 2ac:	e4 0b       	sbc	r30, r20
 2ae:	f5 0b       	sbc	r31, r21

000002b0 <__udivmodsi4_ep>:
 2b0:	66 1f       	adc	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	88 1f       	adc	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	1a 94       	dec	r1
 2ba:	69 f7       	brne	.-38     	; 0x296 <__udivmodsi4_loop>
 2bc:	60 95       	com	r22
 2be:	70 95       	com	r23
 2c0:	80 95       	com	r24
 2c2:	90 95       	com	r25
 2c4:	9b 01       	movw	r18, r22
 2c6:	ac 01       	movw	r20, r24
 2c8:	bd 01       	movw	r22, r26
 2ca:	cf 01       	movw	r24, r30
 2cc:	08 95       	ret

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>
